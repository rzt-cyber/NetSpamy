from telebot import types
import logging
from utils import get_username, create_main_menu, unrestrict_user
from database import Database 

logger = logging.getLogger(__name__)

waiting_for_rules = {}
waiting_for_report_chat = {}

def create_admin_menu(bot, user_id, db: Database):
    markup = types.InlineKeyboardMarkup()
    user_groups = [chat_id for chat_id in db.get_all_groups() if user_id in db.get_admins(chat_id)]
    for chat_id in user_groups:
        try:
            chat = bot.get_chat(chat_id)
            markup.add(types.InlineKeyboardButton(chat.title, callback_data=f"settings_{chat_id}"))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")
    markup.add(types.InlineKeyboardButton(
        "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É",
        url=db.get_bot_invite_url()
    ))
    return markup

def create_settings_menu(bot, chat_id, user_id, db: Database):
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    markup = types.InlineKeyboardMarkup()
    settings = db.get_group_settings(chat_id)
    buttons = [
        ('greeting_enabled', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.'),
        ('profanity_filter', '–§–∏–ª—å—Ç—Ä –º–∞—Ç–æ–≤', '–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π, –≤—ã–¥–∞–≤–∞—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.'),
        ('toxicity_filter', '–§–∏–ª—å—Ç—Ä —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏', '–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Ç–æ–∫—Å–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò, –≤—ã–¥–∞–≤–∞—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.'),
        ('file_filter', '–§–∏–ª—å—Ç—Ä —Ñ–∞–π–ª–æ–≤', '–ë–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, .exe, .bat) –∏ –Ω–∞–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.'),
        ('report_system', '–°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–±', '–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /report. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–±", —á—Ç–æ–±—ã –µ—ë –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.'),
        ('link_filter', '–§–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫', '–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å—Å—ã–ª–∫–∏, –≤—ã–¥–∞–≤–∞—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.'),
        ('captcha_enabled', '–ö–∞–ø—á–∞ –¥–ª—è –Ω–æ–≤—ã—Ö', '–¢—Ä–µ–±—É–µ—Ç –æ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π.')
    ]
    for setting, text, description in buttons:
        status = '‚úÖ' if settings.get(setting, False) else '‚ùå'
        btn_text = f"{text}: {status}"
        markup.row(
            types.InlineKeyboardButton(btn_text, callback_data=f"toggle:{setting}:{chat_id}"),
            types.InlineKeyboardButton("‚ÑπÔ∏è", callback_data=f"info:{setting}:{chat_id}")
        )
    if settings.get('report_system', False):
        log_chat_id = db.get_report_chat(chat_id)
        if not log_chat_id:
            markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∂–∞–ª–æ–±", callback_data=f"report_chat_{chat_id}"))
    markup.add(types.InlineKeyboardButton("üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞", callback_data=f"info_rules_{chat_id}"))
    markup.add(types.InlineKeyboardButton("üí¨ –ö–æ–º–∞–Ω–¥—ã", callback_data=f"commands_{chat_id}"))
    log_chat_id = db.get_report_chat(chat_id)
    if log_chat_id:
        markup.add(types.InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Ç –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤ (ID: {log_chat_id})", callback_data=f"report_chat_{chat_id}"))
    markup.add(types.InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_groups"))
    logger.info(f"–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {settings}")
    return markup

def register_callbacks(bot, db: Database):
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('unmute_'))
    def handle_unmute_callback(call):
        try:
            _, group_id, muted_user_id = call.data.split('_')
            group_id = int(group_id)
            muted_user_id = int(muted_user_id)
            user_id = call.from_user.id
            admins = db.get_admins(group_id)
            if user_id not in admins:
                bot.answer_callback_query(call.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", show_alert=True)
                return
            try:
                bot.restrict_chat_member(
                    group_id,
                    muted_user_id,
                    permissions=types.ChatPermissions(
                        can_send_messages=True,
                        can_send_media_messages=True,
                        can_send_polls=True,
                        can_send_other_messages=True,
                        can_add_web_page_previews=True,
                        can_change_info=False,
                        can_invite_users=False,
                        can_pin_messages=False
                    )
                )
                db.reset_warnings(group_id, muted_user_id)
                bot.edit_message_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, group_id, muted_user_id)} —Ä–∞–∑–º—å—é—á–µ–Ω, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—å—é—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {muted_user_id}: {e}")
                bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ unmute callback: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('captcha_'))
    def handle_captcha_callback(call):
        try:
            _, group_id, user_id = call.data.split('_')
            group_id = int(group_id)
            user_id = int(user_id)
            if call.from_user.id != user_id:
                bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–∞–ø—á–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
                return
            if db.has_passed_captcha(group_id, user_id):
                bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É!", show_alert=True)
                return
            db.set_captcha_passed(group_id, user_id)
            unrestrict_user(bot, group_id, user_id)
            bot.edit_message_text(
                f"‚úÖ {get_username(bot, group_id, user_id)} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É –∏ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç!",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML'
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É –≤ –≥—Ä—É–ø–ø–µ {group_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ captcha callback: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('settings_'))
    def handle_settings_callback(call):
        try:
            group_id = int(call.data.split('_')[1])
            user_id = call.from_user.id
            if user_id in db.get_admins(group_id):
                bot.edit_message_text(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=create_settings_menu(bot, group_id, user_id, db)
                )
            else:
                bot.answer_callback_query(call.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã!", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ settings callback: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data == 'back_to_groups')
    def handle_back_to_groups_callback(call):
        user_id = call.from_user.id
        bot.edit_message_text(
            "–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_admin_menu(bot, user_id, db)
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('toggle:'))
    def handle_toggle_setting_callback(call):
        parts = call.data.split(':')
        if len(parts) == 3:
            _, setting, group_id_str = parts
            try:
                group_id = int(group_id_str)
            except ValueError:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.", show_alert=True)
                return
            user_id = call.from_user.id
            admins = db.get_admins(group_id)
            if user_id in admins:
                settings = db.get_group_settings(group_id)
                if not settings:
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
                    return
                old_value = settings.get(setting, False)
                new_value = not old_value
                db.update_group_setting(group_id, setting, new_value)
                updated_settings = db.get_group_settings(group_id)
                if updated_settings.get(setting) != new_value:
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True)
                    return
                bot.edit_message_text(
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã: {setting} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {'–í–∫–ª' if new_value else '–í—ã–∫–ª'}",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=create_settings_menu(bot, group_id, user_id, db)
                )
                bot.answer_callback_query(call.id, f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'‚úÖ' if new_value else '‚ùå'}.")
            else:
                bot.answer_callback_query(call.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã!", show_alert=True)
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('info:'))
    def handle_info_callback(call):
        parts = call.data.split(':')
        if len(parts) == 3:
            _, setting, group_id_str = parts
            try:
                group_id = int(group_id_str)
            except ValueError:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.", show_alert=True)
                return
            user_id = call.from_user.id
            admins = db.get_admins(group_id)
            if user_id not in admins:
                bot.answer_callback_query(call.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã!", show_alert=True)
                return
            descriptions = {
                'greeting_enabled': '–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.',
                'profanity_filter': '–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π, –≤—ã–¥–∞–≤–∞—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.',
                'toxicity_filter': '–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Ç–æ–∫—Å–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò, –≤—ã–¥–∞–≤–∞—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.',
                'file_filter': '–ë–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, .exe, .bat) –∏ –Ω–∞–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.',
                'report_system': '–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /report. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–±", —á—Ç–æ–±—ã –µ—ë –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.',
                'link_filter': '–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å—Å—ã–ª–∫–∏, –≤—ã–¥–∞–≤–∞—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.',
                'captcha_enabled': '–¢—Ä–µ–±—É–µ—Ç –æ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π.'
            }
            description = descriptions.get(setting, '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=f"settings_{group_id}"))
            bot.edit_message_text(
                f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:\n\n{description}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('info_rules_'))
    def handle_info_rules_callback(call):
        try:
            group_id = int(call.data.split('_')[2])
            user_id = call.from_user.id
            if user_id not in db.get_admins(group_id):
                bot.answer_callback_query(call.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã!", show_alert=True)
                return
            info_rules = db.get_info_rules(group_id)
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=f"settings_{group_id}"))
            bot.edit_message_text(
                f"üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞:\n\n{info_rules}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            waiting_for_rules[user_id] = {
                'group_id': group_id,
                'message_id': call.message.message_id,
                'chat_id': call.message.chat.id
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ info_rules callback: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('report_chat_'))
    def handle_report_chat_callback(call):
        try:
            group_id = int(call.data.split('_')[2])
            user_id = call.from_user.id
            if user_id not in db.get_admins(group_id):
                bot.answer_callback_query(call.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã!", show_alert=True)
                return
            log_chat_id = db.get_report_chat(group_id)
            if log_chat_id:
                bot.edit_message_text(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=create_settings_menu(bot, group_id, user_id, db)
                )
                bot.answer_callback_query(call.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥—Ä—É–ø–ø—ã.")
                return
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=f"settings_{group_id}"))
            bot.edit_message_text(
                f"üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤:\n\n"
                f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –±—É–¥—É—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –∂–∞–ª–æ–±—ã.\n"
                f"2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /setreportchat –≤ —Ç–æ–º —á–∞—Ç–µ, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã.\n"
                f"–¢–æ–ª—å–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            waiting_for_report_chat[user_id] = {
                'group_id': group_id,
                'message_id': call.message.message_id,
                'chat_id': call.message.chat.id
            }
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /setreportchat –¥–ª—è user_id {user_id}: {waiting_for_report_chat[user_id]}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ report_chat callback: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('commands_'))
    def handle_commands_callback(call):
        group_id = int(call.data.split('_')[1])
        user_id = call.from_user.id
        bot.edit_message_text(
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã\n"
            "/report [–ø—Ä–∏—á–∏–Ω–∞] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "\n<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            "/mute [–≤—Ä–µ–º—è] - –ó–∞–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "/unmute - –†–∞–∑–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username)\n"
            "/ban - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "/reload - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"settings_{group_id}")
            )
        )

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")