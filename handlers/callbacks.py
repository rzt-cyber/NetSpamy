from telebot import types
from telebot.handler_backends import StatesGroup, State
import logging
import time
from utils import get_username, create_main_menu
from database import Database 
from .voting import VotingSystem

logger = logging.getLogger(__name__)

def create_admin_menu(bot, user_id, db: Database):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏"""
    markup = types.InlineKeyboardMarkup()
    
    for chat_id in db.get_all_groups():
        if user_id in db.get_admins(chat_id):
            try:
                chat = bot.get_chat(chat_id)
                markup.add(types.InlineKeyboardButton(
                    chat.title,
                    callback_data=f"settings_{chat_id}"
                ))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")
    
    markup.add(types.InlineKeyboardButton(
        "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É",
        callback_data="add_group"
    ))
    return markup

def create_settings_menu(bot, chat_id, user_id, db: Database):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã"""
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    markup = types.InlineKeyboardMarkup()
    settings = db.get_group_settings(chat_id)
    
    buttons = [
        ('greeting_enabled', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'),
        ('profanity_filter', '–§–∏–ª—å—Ç—Ä –º–∞—Ç–æ–≤'),
        ('auto_correction', '–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è —è–∑—ã–∫–∞'),
        ('toxicity_filter', '–§–∏–ª—å—Ç—Ä —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏'),
    ]
    
    for setting, text in buttons:
        btn_text = f"{text}: {'–í–∫–ª' if settings.get(setting, False) else '–í—ã–∫–ª'}"
        markup.add(types.InlineKeyboardButton(
            btn_text,
            callback_data=f"toggle:{setting}:{chat_id}"
        ))
    
    markup.add(types.InlineKeyboardButton(
        "–ö–æ–º–∞–Ω–¥—ã",
        callback_data=f"commands_{chat_id}"
    ))
    
    markup.add(types.InlineKeyboardButton(
        "üìù –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞",
        callback_data=f"edit_rules_{chat_id}"
    ))
    
    markup.add(types.InlineKeyboardButton(
        "‚Üê –ù–∞–∑–∞–¥",
        callback_data="back_to_groups"
    ))
    
    
    logger.info(f"–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {settings}")
    return markup

def register_callbacks(bot, db: Database):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤")
    voting = VotingSystem(bot, db)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('vote_'))
    def handle_vote_callback(call):
        voting.handle_vote(call)
    
    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback(call):
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω callback-–∑–∞–ø—Ä–æ—Å –æ—Ç user_id {call.from_user.id}: {call.data}")
            chat_id = call.message.chat.id
            user_id = call.from_user.id
            data = call.data

            if data.startswith('unmute_'):
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ unmute –¥–ª—è –≥—Ä—É–ø–ø—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data}")
                _, group_id, muted_user_id = data.split('_')
                group_id = int(group_id)
                muted_user_id = int(muted_user_id)
                
                admins = db.get_admins(group_id)
                if user_id not in admins:
                    bot.answer_callback_query(
                        call.id,
                        "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
                        show_alert=True
                    )
                    return
                
                if db.get_mute(group_id, muted_user_id):
                    db.remove_mute(group_id, muted_user_id)
                    db.reset_warnings(group_id, muted_user_id)
                    
                    bot.edit_message_text(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, group_id, muted_user_id)} —Ä–∞–∑–º—å—é—á–µ–Ω, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.",
                        chat_id,
                        call.message.message_id,
                        parse_mode='HTML'
                    )
                else:
                    bot.answer_callback_query(
                        call.id,
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–º—å—é—á–µ–Ω.",
                        show_alert=True
                    )

            elif data.startswith('settings_'):
                group_id = int(data.split('_')[1])
                logger.info(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                if user_id in db.get_admins(group_id):
                    try:
                        bot.edit_message_text(
                            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:",
                            chat_id=chat_id,
                            message_id=call.message.message_id,
                            reply_markup=create_settings_menu(bot, group_id, user_id, db)
                        )
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: message_id {call.message.message_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
                        sent_message = bot.send_message(
                            chat_id,
                            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:",
                            reply_markup=create_settings_menu(bot, group_id, user_id, db)
                        )
                        db.save_welcome_message(user_id, sent_message.message_id)
                        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id {user_id}: message_id {sent_message.message_id}")
                else:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã {group_id}")
                    bot.answer_callback_query(
                        call.id,
                        "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã!",
                        show_alert=True
                    )

            elif data == 'add_group':
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã")
                bot.edit_message_text(
                    "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞'",
                    chat_id,
                    call.message.message_id,
                    reply_markup=create_main_menu()
                )

            elif data.startswith('edit_rules_'):
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ edit_rules: {data}")
                parts = data.split('_')
                if len(parts) >= 3:
                    group_id = int(parts[2])
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ {group_id}")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    admins = db.get_admins(group_id)
                    if user_id not in admins:
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ {group_id}")
                        bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞!", show_alert=True)
                        return

                    # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∞–≤–∏–ª
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–≤–æ–¥ –ø—Ä–∞–≤–∏–ª –¥–ª—è —á–∞—Ç–∞ {group_id}")
                    sent_msg = bot.send_message(
                        call.message.chat.id,
                        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞:",
                        reply_markup=types.ForceReply()
                    )
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: message_id={sent_msg.message_id}")

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    bot.set_state(user_id, "waiting_rules_text", call.message.chat.id)
                    with bot.retrieve_data(user_id, call.message.chat.id) as data_state:
                        data_state["target_chat_id"] = group_id
                    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: user_id={user_id}, chat_id={call.message.chat.id}, state=waiting_rules_text")
            
            elif data == 'back_to_groups':
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø")
                bot.edit_message_text(
                    "–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:",
                    chat_id,
                    call.message.message_id,
                    reply_markup=create_admin_menu(bot, user_id, db)
                )

            elif data.startswith('toggle:'):
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ toggle –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {data}")
                parts = data.split(':')
                logger.info(f"–†–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ callback-–¥–∞–Ω–Ω—ã—Ö: {parts}")
                if len(parts) == 3:
                    _, setting, group_id_str = parts
                    try:
                        group_id = int(group_id_str)
                    except ValueError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è group_id –≤ —á–∏—Å–ª–æ: {group_id_str}, –æ—à–∏–±–∫–∞: {e}")
                        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.", show_alert=True)
                        return
                    
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É {setting} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
                    admins = db.get_admins(group_id)
                    if user_id in admins:
                        settings = db.get_group_settings(group_id)
                        if not settings:
                            logger.error(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
                            return
                        old_value = settings.get(setting, False)
                        new_value = not old_value
                        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {setting} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {old_value} -> {new_value}")
                        db.update_group_setting(group_id, setting, new_value)
                        updated_settings = db.get_group_settings(group_id)
                        if updated_settings.get(setting) != new_value:
                            logger.error(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å: –æ–∂–∏–¥–∞–ª–æ—Å—å {new_value}, –ø–æ–ª—É—á–µ–Ω–æ {updated_settings.get(setting)}")
                            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True)
                            return
                        bot.edit_message_text(
                            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã: {setting} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {'–í–∫–ª' if new_value else '–í—ã–∫–ª'}",
                            chat_id=chat_id,
                            message_id=call.message.message_id,
                            reply_markup=create_settings_menu(bot, group_id, user_id, db)
                        )
                        bot.answer_callback_query(call.id, f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'–í–∫–ª' if new_value else '–í—ã–∫–ª'}.")
                        logger.info(f"–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: message_id {call.message.message_id}")
                    else:
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã {group_id}")
                        bot.answer_callback_query(
                            call.id,
                            "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã!",
                            show_alert=True
                        )
                else:
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback-–¥–∞–Ω–Ω—ã—Ö: {data}, –æ–∂–∏–¥–∞–ª–æ—Å—å toggle:setting:group_id")
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.", show_alert=True)

            elif data.startswith('commands_'):
                group_id = int(data.split('_')[1])
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
                bot.edit_message_text(
                    "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                    "/mute [–≤—Ä–µ–º—è] - –ó–∞–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
                    "/kick - –ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
                    "/ban - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
                    "/report [–ø—Ä–∏—á–∏–Ω–∞] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)",
                    chat_id,
                    call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(
                            "–ù–∞–∑–∞–¥",
                            callback_data=f"settings_{group_id}"
                        )
                    )
                )

            bot.answer_callback_query(call.id)
            logger.info(f"Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç user_id {user_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")