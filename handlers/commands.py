from telebot import types
import logging
from datetime import datetime, timedelta
from threading import Timer
from utils import get_username, parse_mute_duration, format_duration, create_main_menu
from database import Database
from handlers.callbacks import create_admin_menu, create_settings_menu, waiting_for_report_chat
from config import MESSAGE_LIFETIME_SECONDS

logger = logging.getLogger(__name__)

def delete_message_after_delay(bot, chat_id, message_id, db):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤."""
    try:
        db.cursor.execute("SELECT chat_id FROM report_chats WHERE log_chat_id = ?", (chat_id,))
        if db.cursor.fetchone():
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤")
            return
        def delete():
            try:
                bot.delete_message(chat_id, message_id)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        Timer(MESSAGE_LIFETIME_SECONDS, delete).start()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")

def register_commands(bot, db: Database):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""

    @bot.message_handler(commands=['start'])
    def handle_start(message):
        try:
            if message.chat.type == 'private':
                user_id = message.from_user.id
                admin_groups = [chat_id for chat_id in db.get_all_groups() if user_id in db.get_admins(chat_id)]
                existing_message_id = db.get_welcome_message(user_id)
                if admin_groups:
                    if existing_message_id:
                        try:
                            bot.edit_message_text(
                                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                                user_id,
                                existing_message_id,
                                reply_markup=create_admin_menu(bot, user_id, db)
                            )
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id {user_id}: message_id {existing_message_id}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id {user_id}: {e}")
                            sent_message = bot.send_message(
                                user_id,
                                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                                reply_markup=create_admin_menu(bot, user_id, db)
                            )
                            db.save_welcome_message(user_id, sent_message.message_id)
                            logger.info(f"–ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id {user_id}: message_id {sent_message.message_id}")
                    else:
                        sent_message = bot.send_message(
                            user_id,
                            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                            reply_markup=create_admin_menu(bot, user_id, db)
                        )
                        db.save_welcome_message(user_id, sent_message.message_id)
                        logger.info(f"–ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id {user_id}: message_id {sent_message.message_id}")
                else:
                    if existing_message_id:
                        try:
                            bot.edit_message_text(
                                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                                user_id,
                                existing_message_id,
                                reply_markup=create_main_menu()
                            )
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id {user_id}: message_id {existing_message_id}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id {user_id}: {e}")
                            sent_message = bot.send_message(
                                user_id,
                                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                                reply_markup=create_main_menu()
                            )
                            db.save_welcome_message(user_id, sent_message.message_id)
                            logger.info(f"–ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id {user_id}: message_id {sent_message.message_id}")
                    else:
                        sent_message = bot.send_message(
                            user_id,
                            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                            reply_markup=create_main_menu()
                        )
                        db.save_welcome_message(user_id, sent_message.message_id)
                        logger.info(f"–ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id {user_id}: message_id {sent_message.message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /start –¥–ª—è user_id {message.from_user.id}: {e}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    @bot.message_handler(commands=['help'])
    def handle_help(message):
        try:
            bot.send_message(
                message.chat.id,
                "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã\n"
                "/report [–ø—Ä–∏—á–∏–Ω–∞] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
                "\n<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
                "/mute [–≤—Ä–µ–º—è] - –ó–∞–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
                "/unmute - –†–∞–∑–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username)\n"
                "/ban - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
                "/reload - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã\n"
                "/setreportchat - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∫–∞–∫ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)",
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /help: {e}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    @bot.message_handler(commands=['info'])
    def handle_info(message):
        try:
            if message.chat.type not in ['group', 'supergroup']:
                bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
            chat_id = message.chat.id
            info_rules = db.get_info_rules(chat_id)
            sent_message = bot.reply_to(
                message,
                f"üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞:\n\n{info_rules}",
                parse_mode='HTML'
            )
            delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /info: {e}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    @bot.message_handler(commands=['setreportchat'])
    def handle_set_report_chat(message):
        try:
            if message.chat.type not in ['group', 'supergroup']:
                bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return
            user_id = message.from_user.id
            if user_id not in waiting_for_report_chat:
                bot.reply_to(message, "‚ùå –í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–∞—Ç–∞ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
                return
            wait_data = waiting_for_report_chat.get(user_id)
            expected_group_id = wait_data['group_id']
            db.set_report_chat(expected_group_id, message.chat.id)
            bot.edit_message_text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:",
                wait_data['chat_id'],
                wait_data['message_id'],
                reply_markup=create_settings_menu(bot, expected_group_id, user_id, db)
            )
            sent_message = bot.reply_to(message, "‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±. –ö–æ–º–∞–Ω–¥—ã –∑–¥–µ—Å—å –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.")
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è
            logger.info(f"–ß–∞—Ç {message.chat.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤ –≥—Ä—É–ø–ø—ã {expected_group_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /setreportchat: {e}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    @bot.message_handler(commands=['mute', 'ban', 'report', 'reload'])
    def handle_moderation_commands(message):
        try:
            if message.chat.type not in ['group', 'supergroup']:
                bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                return

            chat_id = message.chat.id
            user_id = message.from_user.id
            admins = db.get_admins(chat_id)

            if user_id not in admins and message.text.split()[0] != '/report':
                sent_message = bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                return

            command = message.text.split()[0]

            if command == '/reload':
                try:
                    telegram_admins = [admin.user.id for admin in bot.get_chat_administrators(chat_id)]
                    db.update_admins(chat_id, telegram_admins)
                    sent_message = bot.reply_to(
                        message,
                        "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.",
                        parse_mode='HTML'
                    )
                    delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ {chat_id}: {e}")
                    sent_message = bot.reply_to(
                        message,
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                        parse_mode='HTML'
                    )
                    delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                return

            if not message.reply_to_message:
                sent_message = bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                return

            target_user_id = message.reply_to_message.from_user.id
            message_id = message.reply_to_message.message_id

            if command == '/mute':
                duration_str = message.text.split()[1] if len(message.text.split()) > 1 else None
                duration_sec = parse_mute_duration(duration_str)
                unmute_time = datetime.now() + timedelta(seconds=duration_sec)

                try:
                    bot.restrict_chat_member(
                        chat_id,
                        target_user_id,
                        until_date=unmute_time,
                        permissions=types.ChatPermissions(can_send_messages=False)
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
                    sent_message = bot.reply_to(
                        message,
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—å—é—Ç–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ (–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)."
                    )
                    delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                    return

                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(
                    "–†–∞–∑–º—å—é—Ç–∏—Ç—å",
                    callback_data=f"unmute_{chat_id}_{target_user_id}"
                ))

                sent_message = bot.send_message(
                    chat_id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, chat_id, target_user_id)} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {format_duration(duration_sec)}.",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                delete_message_after_delay(bot, chat_id, sent_message.message_id, db)

            elif command == '/ban':
                try:
                    bot.kick_chat_member(chat_id, target_user_id)
                    sent_message = bot.reply_to(
                        message,
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, chat_id, target_user_id)} –∑–∞–±–∞–Ω–µ–Ω.",
                        parse_mode='HTML'
                    )
                    delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
                    sent_message = bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    delete_message_after_delay(bot, chat_id, sent_message.message_id, db)

            elif command == '/report':
                settings = db.get_group_settings(chat_id)
                if not settings.get('report_system', False):
                    sent_message = bot.reply_to(message, "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –µ—ë –≤–∫–ª—é—á–µ–Ω–∏—è.")
                    delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                    return

                reason = ' '.join(message.text.split()[1:]) if len(message.text.split()) > 1 else "–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã"
                db.add_report(chat_id, user_id, target_user_id, reason, message_id)

                report_msg = (
                    f"–ñ–∞–ª–æ–±–∞ –æ—Ç: {get_username(bot, chat_id, user_id)}\n"
                    f"–ù–∞: {get_username(bot, chat_id, target_user_id)}\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                )

                log_chat_id = db.get_report_chat(chat_id)
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(
                    "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é",
                    url=f"https://t.me/c/{str(chat_id)[4:]}/{message_id}"
                ))

                if log_chat_id:
                    try:
                        bot.send_message(log_chat_id, report_msg, reply_markup=markup, parse_mode='HTML')
                        sent_message = bot.reply_to(message, "–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤.")
                        delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞ –≤ –ª–æ–≥-—á–∞—Ç {log_chat_id}: {e}")
                        sent_message = bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –≤ —á–∞—Ç –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤.")
                        delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                else:
                    sent_message = bot.reply_to(message, "‚ö†Ô∏è –ß–∞—Ç –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    delete_message_after_delay(bot, chat_id, sent_message.message_id, db)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            sent_message = bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            delete_message_after_delay(bot, chat_id, sent_message.message_id, db)

    @bot.message_handler(commands=['unmute'])
    def handle_unmute(message):
        try:
            if message.chat.type not in ['group', 'supergroup']:
                sent_message = bot.reply_to(message, "‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
                delete_message_after_delay(bot, message.chat.id, sent_message.message_id, db)
                return

            chat_id = message.chat.id
            user_id = message.from_user.id

            admins = db.get_admins(chat_id)
            if user_id not in admins:
                sent_message = bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
                delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                return

            target_user_id = None
            if message.reply_to_message:
                target_user_id = message.reply_to_message.from_user.id
            elif len(message.text.split()) > 1:
                mention = message.text.split()[1]
                if mention.startswith('@'):
                    try:
                        user = bot.get_chat_member(chat_id, mention).user
                        target_user_id = user.id
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é {mention}: {e}")
                        sent_message = bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                        delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                        return

            if not target_user_id:
                sent_message = bot.reply_to(message, "‚ùå –£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username) –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                return

            try:
                bot.restrict_chat_member(
                    chat_id,
                    target_user_id,
                    permissions=types.ChatPermissions(
                        can_send_messages=True,
                        can_send_media_messages=True,
                        can_send_polls=True,
                        can_send_other_messages=True,
                        can_add_web_page_previews=True,
                        can_change_info=False,
                        can_invite_users=False,
                        can_pin_messages=False
                    )
                )
                sent_message = bot.reply_to(
                    message,
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, chat_id, target_user_id)} —Ä–∞–∑–º—å—é—á–µ–Ω.",
                    parse_mode='HTML'
                )
                delete_message_after_delay(bot, chat_id, sent_message.message_id, db)
                db.reset_warnings(chat_id, target_user_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—å—é—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
                sent_message = bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                delete_message_after_delay(bot, chat_id, sent_message.message_id, db)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /unmute: {e}")
            sent_message = bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            delete_message_after_delay(bot, message.chat.id, sent_message.message_id, db)