from telebot import types
import re
import time
import logging
import sqlite3
from .security import is_dangerous_file, handle_dangerous_file
from datetime import datetime, timedelta
from config import PROFANITY_REGEX
from utils import (
    is_latin_text, correct_layout, get_username, check_message, create_main_menu, 
    get_current_time_in_timezone, minutes_to_time, is_chat_open, 
    unrestrict_all_members, restrict_all_members, unrestrict_user
)
from database import Database
from handlers.callbacks import create_admin_menu, create_settings_menu

logger = logging.getLogger(__name__)

def handle_chat_status(bot, db, chat_id, force_notification=False):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞"""
    try:
        work_hours = db.get_work_hours(chat_id)
        if not work_hours:
            return
            
        work_start, work_end, timezone = work_hours
        current_time = get_current_time_in_timezone(timezone)
        is_open = is_chat_open(current_time, work_start, work_end)
        current_closed_status = db.is_chat_closed(chat_id)

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if force_notification or (is_open != (not current_closed_status)):
            if is_open:
                db.set_chat_closed(chat_id, False)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                if force_notification or not current_closed_status:
                    bot.send_message(
                        chat_id, 
                        f"üîì –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç! –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {minutes_to_time(work_start)}-{minutes_to_time(work_end)} ({timezone})"
                    )
            else:
                db.set_chat_closed(chat_id, True)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                if force_notification or current_closed_status:
                    bot.send_message(
                        chat_id,
                        f"üîí –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç! –°–ª–µ–¥—É—é—â–µ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ: {minutes_to_time(work_start)} ({timezone})\n"
                        "–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è, –∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å—Å—è."
                    )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞: {e}")

def register_events(bot, db: Database):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
    
    global _bot, _db
    _bot = bot
    _db = db
    
    @bot.my_chat_member_handler()
    def handle_chat_member_update(update):
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ my_chat_member: {update}")
            chat_id = update.chat.id

            if update.new_chat_member.status == 'kicked' and update.chat.type in ['group', 'supergroup']:
                logger.info(f"–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}")
                with sqlite3.connect(db.db_name) as conn:
                    cursor = conn.cursor()
                    cursor.execute("DELETE FROM groups WHERE chat_id = ?", (chat_id,))
                    cursor.execute("DELETE FROM admins WHERE chat_id = ?", (chat_id,))
                    cursor.execute("DELETE FROM warnings WHERE chat_id = ?", (chat_id,))
                    cursor.execute("DELETE FROM mutes WHERE chat_id = ?", (chat_id,))
                    cursor.execute("DELETE FROM reports WHERE chat_id = ?", (chat_id,))
                    conn.commit()
                    logger.info(f"–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã {chat_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã")
                return

            if (update.old_chat_member.status == 'kicked' and 
                update.new_chat_member.status in ['member', 'administrator'] and 
                update.chat.type in ['group', 'supergroup']):
                logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat_id}")
                db.add_group(chat_id)
                try:
                    admins = [admin.user.id for admin in bot.get_chat_administrators(chat_id)]
                    db.update_admins(chat_id, admins)
                    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {admins}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã {chat_id}: {e}")

                settings = db.get_group_settings(chat_id)
                if settings.get('greeting_enabled', True):
                    bot.send_message(
                        chat_id,
                        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É! –Ø –±–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
                    )
                    logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {chat_id}")

                for admin_id in db.get_admins(chat_id):
                    try:
                        admin = bot.get_chat_member(chat_id, admin_id).user
                        if admin.is_bot:
                            logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –∞–¥–º–∏–Ω {admin_id}, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±–æ—Ç")
                            continue

                        welcome_message_id = db.get_welcome_message(admin_id)
                        logger.info(f"–î–ª—è –∞–¥–º–∏–Ω–∞ {admin_id} –Ω–∞–π–¥–µ–Ω message_id: {welcome_message_id}")
                        if welcome_message_id:
                            try:
                                bot.edit_message_text(
                                    f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {update.chat.title}. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                                    chat_id=admin_id,
                                    message_id=welcome_message_id,
                                    reply_markup=create_admin_menu(bot, admin_id, db)
                                )
                                logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {admin_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: message_id {welcome_message_id}")
                            except Exception as e:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {admin_id}: {e}")
                                sent_message = bot.send_message(
                                    admin_id,
                                    f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {update.chat.title}. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                                    reply_markup=create_admin_menu(bot, admin_id, db)
                                )
                                db.save_welcome_message(admin_id, sent_message.message_id)
                                logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {admin_id}: message_id {sent_message.message_id}")
                        else:
                            sent_message = bot.send_message(
                                admin_id,
                                f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {update.chat.title}. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                                reply_markup=create_admin_menu(bot, admin_id, db)
                            )
                            db.save_welcome_message(admin_id, sent_message.message_id)
                            logger.info(f"–ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {admin_id}: message_id {sent_message.message_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_chat_member_update: {e}")

    @bot.message_handler(content_types=['new_chat_members'])
    def handle_new_members(message):
        try:
            chat_id = message.chat.id
            settings = db.get_group_settings(chat_id)
            if not settings.get('greeting_enabled', True):
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            bot_member = bot.get_chat_member(chat_id, bot.get_me().id)
            if bot_member.can_delete_messages:
                try:
                    bot.delete_message(chat_id, message.message_id)
                    logger.info(f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø–µ {chat_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
            else:
                logger.warning(f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ {chat_id}")

            for member in message.new_chat_members:
                if member.id != bot.get_me().id:
                    bot.send_message(
                        chat_id,
                        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.first_name}! –Ø –±–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_new_members: {e}")

    @bot.message_handler(content_types=['left_chat_member'])
    def handle_left_member(message):    
        try:
            chat_id = message.chat.id
            if not message.left_chat_member:            
                return
            left_member = message.left_chat_member
            if left_member.id == bot.get_me().id:
                return
            try:            
                if message.chat.type in ['group', 'supergroup']:
                    bot.delete_message(chat_id, message.message_id)        
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ: {e}")
            bot.send_message(
                chat_id,            f"üò¢ {left_member.first_name} –ø–æ–∫–∏–Ω—É–ª(–∞) —á–∞—Ç",
                parse_mode='HTML'        )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")


    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    @bot.message_handler(func=lambda msg: msg.reply_to_message is not None 
                  and "‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã" in msg.reply_to_message.text
                  and msg.reply_to_message.from_user.id == bot.get_me().id)
    def handle_worktime_reply(message):
        try:
            user_id = message.from_user.id
            original_text = message.reply_to_message.text
            group_id = int(original_text.split("ID: ")[1].split(")")[0])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
            admins = db.get_admins(group_id)
            if user_id not in admins:
                bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
                return

            # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ (–ø—Ä–∏–º–µ—Ä: "09:00-18:00 Europe/Moscow")
            time_input = message.text.strip()
            if "-" not in time_input:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

            # –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            parts = time_input.split()
            if len(parts) < 2:
                timezone = "UTC"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                time_range = parts[0]
            else:
                time_range = parts[0]
                timezone = " ".join(parts[1:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –∫–∞–∫ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            try:
                import pytz  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (pip install pytz)
                pytz.timezone(timezone)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            except pytz.UnknownTimeZoneError:
                timezone = "UTC"  # –ï—Å–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC
                bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UTC (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å)")

            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            start_str, end_str = time_range.split("-")
            start_time = datetime.strptime(start_str.strip(), "%H:%M").time()
            end_time = datetime.strptime(end_str.strip(), "%H:%M").time()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–∏–Ω—É—Ç—ã
            work_start = start_time.hour * 60 + start_time.minute
            work_end = end_time.hour * 60 + end_time.minute

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            db.update_work_hours(group_id, work_start, work_end, timezone)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                bot.delete_message(message.chat.id, message.reply_to_message.message_id)
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
            bot.send_message(
                message.chat.id,
                f"‚úÖ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω:\n"
                f"‚Ä¢ –í—Ä–µ–º—è: {start_str}-{end_str}\n"
                f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}",
                reply_markup=create_admin_menu(bot, user_id, db)
            )

        except ValueError as e:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: `09:00-18:00 Europe/Moscow`", parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: {str(e)}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞
    @bot.message_handler(func=lambda msg: msg.reply_to_message is not None 
                      and msg.reply_to_message.text.startswith("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞")
                      and msg.reply_to_message.from_user.id == bot.get_me().id)
    def handle_rules_reply(message):
        try:
            user_id = message.from_user.id
            original_text = message.reply_to_message.text
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            group_id = int(original_text.split("ID: ")[1].split(")")[0])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admins = db.get_admins(group_id)
            if user_id not in admins:
                bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã!")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
            db.set_rules(group_id, message.text)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∞–≤–∏–ª
            bot.delete_message(message.chat.id, message.reply_to_message.message_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.delete_message(message.chat.id, message.message_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                #reply_markup=create_admin_menu(bot, user_id, db)  # <-- –í–æ–∑–≤—Ä–∞—Ç –º–µ–Ω—é
            )
            
            bot.send_message(
                message.chat.id,
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                reply_markup=create_admin_menu(bot, user_id, db)
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª: {e}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª!")
    

        try:
            chat_id = message.chat.id
            user_id = message.from_user.id
            text = message.text
            settings = db.get_group_settings(chat_id)

            if message.from_user.is_bot or not settings:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: user_id={user_id}, chat_id={chat_id}")
                return
            
            unmute_time = db.get_mute(chat_id, user_id)
            if unmute_time and datetime.now() < unmute_time:
                bot.delete_message(chat_id, message.message_id)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –º—É—Ç–µ –¥–æ {unmute_time}")
                return
            elif unmute_time:
                db.remove_mute(chat_id, user_id)
                db.reset_warnings(chat_id, user_id)
                logger.info(f"–ú—É—Ç —Å–Ω—è—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")

            if settings.get('auto_correction', True):
                if is_latin_text(text.lower()):
                    corrected = correct_layout(text.lower())
                    if corrected != text.lower():
                        bot.reply_to(
                            message,
                            f"{corrected}\n–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_username(bot, chat_id, user_id)}.",
                            parse_mode='HTML'
                        )
                        logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ '{text}' -> '{corrected}'")

            has_profanity = False
            if settings.get('profanity_filter', True):
                if re.search(PROFANITY_REGEX, text.lower(), re.IGNORECASE):
                    has_profanity = True
                    bot.delete_message(chat_id, message.message_id)
                    warnings = db.add_warning(chat_id, user_id)
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç user_id {user_id}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}")
                    if warnings >= 3:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –Ω–∞ –º—É—Ç
                        bot_member = bot.get_chat_member(chat_id, bot.get_me().id)
                        if bot_member.can_restrict_members:
                            unmute_time = datetime.now() + timedelta(seconds=24 * 60 * 60)
                            db.add_mute(chat_id, user_id, unmute_time)
                            markup = types.InlineKeyboardMarkup()
                            markup.add(types.InlineKeyboardButton(
                                "–†–∞–∑–º—å—é—Ç–∏—Ç—å",
                                callback_data=f"unmute_{chat_id}_{user_id}"
                            ))
                            bot.send_message(
                                chat_id,
                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, chat_id, user_id)} –ø–æ–ª—É—á–∏–ª 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 24 —á–∞—Å–∞.",
                                reply_markup=markup,
                                parse_mode='HTML'
                            )
                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 24 —á–∞—Å–∞")
                        else:
                            logger.warning(f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ {chat_id}")
                            bot.send_message(
                                chat_id,
                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, chat_id, user_id)} –ø–æ–ª—É—á–∏–ª 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–º—å—é—Ç–∏—Ç—å (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤).",
                                parse_mode='HTML'
                            )
                    else:
                        bot.send_message(
                            chat_id,
                            f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings}/3 –¥–ª—è {get_username(bot, chat_id, user_id)}. –ü—Ä–∏—á–∏–Ω–∞: –º–∞—Ç",
                            parse_mode='HTML'
                        )
                        
            if not has_profanity and settings.get('toxicity_filter', True):
                toxicity_result = check_message(text)
                if toxicity_result['is_toxic']:
                    bot.delete_message(chat_id, message.message_id)
                    warnings = db.add_warning(chat_id, user_id)
                    logger.info(f"–¢–æ–∫—Å–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}: {text}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}")
                    if warnings >= 3:
                        bot_member = bot.get_chat_member(chat_id, bot.get_me().id)
                        if bot_member.can_restrict_members:
                            unmute_time = datetime.now() + timedelta(seconds=24 * 60 * 60)
                            db.add_mute(chat_id, user_id, unmute_time)
                            markup = types.InlineKeyboardMarkup()
                            markup.add(types.InlineKeyboardButton(
                                "–†–∞–∑–º—å—é—Ç–∏—Ç—å",
                                callback_data=f"unmute_{chat_id}_{user_id}"
                            ))
                            bot.send_message(
                                chat_id,
                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, chat_id, user_id)} –ø–æ–ª—É—á–∏–ª 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 24 —á–∞—Å–∞ –∑–∞ —Ç–æ–∫—Å–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                                reply_markup=markup,
                                parse_mode='HTML'
                            )
                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 24 —á–∞—Å–∞ –∑–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å")
                        else:
                            logger.warning(f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ {chat_id}")
                            bot.send_message(
                                chat_id,
                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, chat_id, user_id)} –ø–æ–ª—É—á–∏–ª 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ —Ç–æ–∫—Å–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–º—å—é—Ç–∏—Ç—å (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤).",
                                parse_mode='HTML'
                            )
                    else:
                        bot.send_message(
                            chat_id,
                            f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings}/3 –¥–ª—è {get_username(bot, chat_id, user_id)}. –ü—Ä–∏—á–∏–Ω–∞: —Ç–æ–∫—Å–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                            parse_mode='HTML'
                        )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è '{text}' –≤ –≥—Ä—É–ø–ø–µ {chat_id}: {e}")
    
    @bot.message_handler(content_types=['text', 'photo', 'video', 'document'])
    def unified_message_handler(message):
        try:
            chat_id = message.chat.id
            user_id = message.from_user.id
            
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–°
            if message.chat.type not in ['group', 'supergroup']:
                return

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
            settings = db.get_group_settings(chat_id)
            if not settings:
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
            bot_member = bot.get_chat_member(chat_id, bot.get_me().id)
            if not bot_member.can_delete_messages:
                logger.warning(f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {chat_id}")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞ (—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)
            work_hours = db.get_work_hours(chat_id)
            if work_hours:
                work_start, work_end, timezone = work_hours
                current_time = get_current_time_in_timezone(timezone)
                is_open = is_chat_open(current_time, work_start, work_end)
                
                if not is_open:
                    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        bot.delete_message(chat_id, message.message_id)
                        
                        until_date = int(time.time()) + 3600
                        bot.restrict_chat_member(
                            chat_id=chat_id,
                            user_id=user_id,
                            until_date=until_date,
                            permissions=types.ChatPermissions(
                                can_send_messages=False,
                                can_send_media_messages=False,
                                can_send_polls=False,
                                can_send_other_messages=False,
                                can_add_web_page_previews=False,
                                can_change_info=False,
                                can_invite_users=False,
                                can_pin_messages=False
                            )
                        )
                        bot.send_message(
                            chat_id,
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, chat_id, user_id)} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ 1 —á–∞—Å "
                            f"–∑–∞ –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç–æ–º —á–∞—Ç–µ.",
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞: {e}")
                    return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            unmute_time = db.get_mute(chat_id, user_id)
            if unmute_time and datetime.now() < unmute_time:
                try:
                    bot.delete_message(chat_id, message.message_id)
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –º—É—Ç–µ –¥–æ {unmute_time}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º—É—Ç–µ: {e}")
                return
            elif unmute_time:
                db.remove_mute(chat_id, user_id)
                db.reset_warnings(chat_id, user_id)
                logger.info(f"–ú—É—Ç —Å–Ω—è—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.content_type != 'text':
                return

            text = message.text

            # –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏
            if settings.get('auto_correction', True):
                if is_latin_text(text.lower()):
                    corrected = correct_layout(text.lower())
                    if corrected != text.lower():
                        bot.reply_to(
                            message,
                            f"{corrected}\n–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_username(bot, chat_id, user_id)}.",
                            parse_mode='HTML'
                        )
                        logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ '{text}' -> '{corrected}'")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç
            has_profanity = False
            if settings.get('profanity_filter', True):
                if re.search(PROFANITY_REGEX, text.lower(), re.IGNORECASE):
                    has_profanity = True
                    try:
                        bot.delete_message(chat_id, message.message_id)
                        warnings = db.add_warning(chat_id, user_id)
                        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç user_id {user_id}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}")
                        
                        if warnings >= 3:
                            if bot_member.can_restrict_members:
                                unmute_time = datetime.now() + timedelta(seconds=24 * 60 * 60)
                                db.add_mute(chat_id, user_id, unmute_time)
                                markup = types.InlineKeyboardMarkup()
                                markup.add(types.InlineKeyboardButton(
                                    "–†–∞–∑–º—å—é—Ç–∏—Ç—å",
                                    callback_data=f"unmute_{chat_id}_{user_id}"
                                ))
                                bot.send_message(
                                    chat_id,
                                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, chat_id, user_id)} –ø–æ–ª—É—á–∏–ª 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 24 —á–∞—Å–∞.",
                                    reply_markup=markup,
                                    parse_mode='HTML'
                                )
                            else:
                                bot.send_message(
                                    chat_id,
                                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, chat_id, user_id)} –ø–æ–ª—É—á–∏–ª 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–º—å—é—Ç–∏—Ç—å.",
                                    parse_mode='HTML'
                                )
                        else:
                            bot.send_message(
                                chat_id,
                                f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings}/3 –¥–ª—è {get_username(bot, chat_id, user_id)}. –ü—Ä–∏—á–∏–Ω–∞: –º–∞—Ç",
                                parse_mode='HTML'
                            )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç–∞: {e}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –º–∞—Ç–∞)
            if not has_profanity and settings.get('toxicity_filter', True):
                try:
                    toxicity_result = check_message(text)
                    if toxicity_result.get('is_toxic', False):
                        try:
                            bot.delete_message(chat_id, message.message_id)
                            warnings = db.add_warning(chat_id, user_id)
                            logger.info(f"–¢–æ–∫—Å–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {user_id}: {text}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}")
                            
                            if warnings >= 3:
                                if bot_member.can_restrict_members:
                                    unmute_time = datetime.now() + timedelta(seconds=24 * 60 * 60)
                                    db.add_mute(chat_id, user_id, unmute_time)
                                    markup = types.InlineKeyboardMarkup()
                                    markup.add(types.InlineKeyboardButton(
                                        "–†–∞–∑–º—å—é—Ç–∏—Ç—å",
                                        callback_data=f"unmute_{chat_id}_{user_id}"
                                    ))
                                    bot.send_message(
                                        chat_id,
                                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, chat_id, user_id)} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 24 —á–∞—Å–∞ –∑–∞ —Ç–æ–∫—Å–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                                        reply_markup=markup,
                                        parse_mode='HTML'
                                    )
                                else:
                                    bot.send_message(
                                        chat_id,
                                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username(bot, chat_id, user_id)} –ø–æ–ª—É—á–∏–ª 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–º—å—é—Ç–∏—Ç—å.",
                                        parse_mode='HTML'
                                    )
                            else:
                                bot.send_message(
                                    chat_id,
                                    f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings}/3 –¥–ª—è {get_username(bot, chat_id, user_id)}. –ü—Ä–∏—á–∏–Ω–∞: —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å",
                                    parse_mode='HTML'
                                )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {e}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {e}")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ unified_message_handler: {e}")
