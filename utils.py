from telebot import types
import logging
from config import LAYOUT_TRANS, BOT_INVITE_URL
from model.predict import predict_toxicity
import pytz
import time
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler

scheduler = BackgroundScheduler()

logger = logging.getLogger(__name__)

def is_latin_text(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã (–æ—à–∏–±–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∏)"""
    if not all(ord(char) < 128 for char in text):
        return False
    if len(text) <= 3:
        return False
    if ' ' in text or text.isalpha() and len(text.split()) > 1:
        return False
    return True

def correct_layout(text):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫—É —Å –ª–∞—Ç–∏–Ω—Å–∫–æ–π –Ω–∞ —Ä—É—Å—Å–∫—É—é"""
    return text.translate(LAYOUT_TRANS)

def get_username(bot, chat_id, user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç username –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = bot.get_chat_member(chat_id, user_id).user
        if user.username:
            return f"@{user.username}"
        return f'<a href="tg://user?id={user_id}">{user.first_name}</a>'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return f"user_id {user_id}"

def parse_mute_duration(duration_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1h, 30m, 2d)"""
    if not duration_str:
        return 24 * 60 * 60
    try:
        unit = duration_str[-1].lower()
        value = int(duration_str[:-1])
        if unit == 'm':
            return value * 60
        elif unit == 'h':
            return value * 60 * 60
        elif unit == 'd':
            return value * 24 * 60 * 60
        return 24 * 60 * 60
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º—É—Ç–∞: {e}")
        return 24 * 60 * 60

def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{seconds} —Å–µ–∫—É–Ω–¥"
    elif seconds < 3600:
        return f"{seconds // 60} –º–∏–Ω—É—Ç"
    elif seconds < 86400:
        return f"{seconds // 3600} —á–∞—Å–æ–≤"
    return f"{seconds // 86400} –¥–Ω–µ–π"

def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É",
        url=BOT_INVITE_URL
    ))
    return markup

def check_message(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å."""
    try:
        result = predict_toxicity(text)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ '{text}': is_toxic={result == 1}, label={result}")
        return {
            "is_toxic": result == 1,
            "label": result
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ predict_toxicity –¥–ª—è —Ç–µ–∫—Å—Ç–∞ '{text}': {e}") 
        return {"is_toxic": False, "label": 0}
    
def get_current_time_in_timezone(timezone_str="UTC"):
    try:
        tz = pytz.timezone(timezone_str)
        return datetime.now(tz).time()
    except pytz.UnknownTimeZoneError:
        return datetime.utcnow().time()

def minutes_to_time(minutes):
    hours = minutes // 60
    mins = minutes % 60
    return f"{hours:02d}:{mins:02d}"

def is_chat_open(current_time, work_start, work_end):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —á–∞—Ç –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    try:
        current_minutes = current_time.hour * 60 + current_time.minute
        return work_start <= current_minutes <= work_end
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
        return True

def validate_time_format(time_str: str) -> bool:
    try:
        datetime.datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False
    
def notify_chat_status(bot, chat_id, is_opening, work_start, work_end, timezone):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏"""
    try:
        if is_opening:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –≤—Å–µ–º
            for member in bot.get_chat_members(chat_id):
                try:
                    bot.restrict_chat_member(
                        chat_id=chat_id,
                        user_id=member.user.id,
                        permissions=types.ChatPermissions(
                            can_send_messages=True,
                            can_send_media_messages=True
                        )
                    )
                except:
                    pass
            
            bot.send_message(chat_id, "üîì –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç!")
            bot.set_chat_description(chat_id, "")  # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        else:
            update_chat_description(bot, chat_id, work_start, timezone)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")    
    
def update_chat_description(bot, chat_id, work_start, timezone):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞"""
    try:
        open_time = minutes_to_time(work_start)
        description = f"üîí –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç. –û—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ {open_time} ({timezone})"
        bot.set_chat_description(chat_id, description)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ: {e}")
        
def setup_chat_schedule(bot, db, chat_id, work_start, work_end, timezone):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    from handlers.events import handle_chat_status

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    for job in scheduler.get_jobs():
        if job.id == f'schedule_{chat_id}':
            job.remove()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    scheduler.add_job(
        handle_chat_status,
        'cron',
        hour='*',  # –ö–∞–∂–¥—ã–π —á–∞—Å
        minute=0,  # –í –Ω–∞—á–∞–ª–µ —á–∞—Å–∞
        args=[bot, db, chat_id, False],  # –ë–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        id=f'schedule_{chat_id}'
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    scheduler.add_job(
        handle_chat_status,
        'cron',
        hour=work_start // 60,
        minute=work_start % 60,
        args=[bot, db, chat_id, True],  # –° –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        id=f'open_{chat_id}'
    )

    scheduler.add_job(
        handle_chat_status,
        'cron',
        hour=work_end // 60,
        minute=work_end % 60,
        args=[bot, db, chat_id, True],  # –° –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        id=f'close_{chat_id}'
    )

    if not scheduler.running:
        scheduler.start()
        
def restrict_all_members(bot, chat_id: int):
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –±–æ—Ç–æ–≤)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
        admins = [admin.user.id for admin in bot.get_chat_administrators(chat_id)]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        member_count = bot.get_chat_member_count(chat_id)
        logger.info(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–ª—è {member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        msg = bot.send_message(
            chat_id, 
            f"üîí –ù–∞—á–∏–Ω–∞—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤... ({member_count} —á–µ–ª.)",
            disable_notification=True
        )
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
        restricted_count = 0
        for i in range(0, member_count, 100):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–º–µ—Ç–æ–¥ get_chat_members –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥:
                    # –¢–∞–∫ –∫–∞–∫ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –±—É–¥–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å
                    # —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –∞–∫—Ç–∏–≤–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
                    # –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞!
                    break
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                    time.sleep(2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            f"üîí –ü—Ä–∞–≤–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –¥–ª—è {restricted_count}/{member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            chat_id, msg.message_id
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∞–≤: {e}")

def unrestrict_all_members(bot, chat_id: int):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        member_count = bot.get_chat_member_count(chat_id)
        logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–ª—è {member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        msg = bot.send_message(
            chat_id, 
            f"üîì –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤... ({member_count} —á–µ–ª.)",
            disable_notification=True
        )
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
        unrestricted_count = 0
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            f"üîì –ü—Ä–∞–≤–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {unrestricted_count}/{member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            chat_id, msg.message_id
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤: {e}")

def unrestrict_user(bot, chat_id: int, user_id: int):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            permissions=types.ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_polls=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_change_info=False,
                can_invite_users=False,
                can_pin_messages=False
            )
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–ª—è {user_id}: {e}")
        return False
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        offset = 0
        while True:
            members = bot.get_chat_members(chat_id, offset=offset, limit=100)
            if not members:
                break
            for member in members:
                try:
                    bot.restrict_chat_member(
                        chat_id=chat_id,
                        user_id=member.user.id,
                        permissions=types.ChatPermissions(
                            can_send_messages=True,
                            can_send_media_messages=True,
                            can_send_polls=True,
                            can_send_other_messages=True
                        )
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {member.user.id}: {e}")
            offset += 100
            time.sleep(0.5)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")